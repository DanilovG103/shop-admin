# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  basketId: String
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  basketId: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  basketId: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  basketId: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  basketId: String
  createdAt: DateTime
}

type Good {
  id: ID!
  title: String
  description: String
  brand: Brand
  category: GoodCategoryType
  price: Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  isInBasket: Boolean
  createdAt: DateTime
}

enum GoodCategoryType {
  MALE
  FEMALE
  KIDS
}

input GoodWhereUniqueInput {
  id: ID
}

input GoodWhereInput {
  AND: [GoodWhereInput!]
  OR: [GoodWhereInput!]
  NOT: [GoodWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  brand: BrandWhereInput
  category: GoodCategoryTypeNullableFilter
  price: IntFilter
  images: ImageManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input GoodCategoryTypeNullableFilter {
  equals: GoodCategoryType
  in: [GoodCategoryType!]
  notIn: [GoodCategoryType!]
  not: GoodCategoryTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input GoodOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  category: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
}

input GoodUpdateInput {
  title: String
  description: String
  brand: BrandRelateToOneForUpdateInput
  category: GoodCategoryType
  price: Int
  images: ImageRelateToManyForUpdateInput
  createdAt: DateTime
}

input BrandRelateToOneForUpdateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input GoodUpdateArgs {
  where: GoodWhereUniqueInput!
  data: GoodUpdateInput!
}

input GoodCreateInput {
  title: String
  description: String
  brand: BrandRelateToOneForCreateInput
  category: GoodCategoryType
  price: Int
  images: ImageRelateToManyForCreateInput
  createdAt: DateTime
}

input BrandRelateToOneForCreateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Basket {
  id: ID!
  goods(where: GoodWhereInput! = {}, orderBy: [GoodOrderByInput!]! = [], take: Int, skip: Int! = 0): [Good!]
  goodsCount(where: GoodWhereInput! = {}): Int
  user: User
  sum: Int
}

input BasketWhereUniqueInput {
  id: ID
}

input BasketWhereInput {
  AND: [BasketWhereInput!]
  OR: [BasketWhereInput!]
  NOT: [BasketWhereInput!]
  id: IDFilter
  goods: GoodManyRelationFilter
  user: UserWhereInput
}

input GoodManyRelationFilter {
  every: GoodWhereInput
  some: GoodWhereInput
  none: GoodWhereInput
}

input BasketOrderByInput {
  id: OrderDirection
}

input BasketUpdateInput {
  goods: GoodRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input GoodRelateToManyForUpdateInput {
  disconnect: [GoodWhereUniqueInput!]
  set: [GoodWhereUniqueInput!]
  create: [GoodCreateInput!]
  connect: [GoodWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BasketUpdateArgs {
  where: BasketWhereUniqueInput!
  data: BasketUpdateInput!
}

input BasketCreateInput {
  goods: GoodRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
}

input GoodRelateToManyForCreateInput {
  create: [GoodCreateInput!]
  connect: [GoodWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Brand {
  id: ID!
  title: String
}

input BrandWhereUniqueInput {
  id: ID
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  id: IDFilter
  title: StringFilter
}

input BrandOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input BrandUpdateInput {
  title: String
}

input BrandUpdateArgs {
  where: BrandWhereUniqueInput!
  data: BrandUpdateInput!
}

input BrandCreateInput {
  title: String
}

type Request {
  id: ID!
  data: Basket
  status: RequestStatusType
  rejectReason: String
}

enum RequestStatusType {
  PENDING
  FULFILLED
  REJECTED
}

input RequestWhereUniqueInput {
  id: ID
}

input RequestWhereInput {
  AND: [RequestWhereInput!]
  OR: [RequestWhereInput!]
  NOT: [RequestWhereInput!]
  id: IDFilter
  data: BasketWhereInput
  status: RequestStatusTypeNullableFilter
  rejectReason: StringFilter
}

input RequestStatusTypeNullableFilter {
  equals: RequestStatusType
  in: [RequestStatusType!]
  notIn: [RequestStatusType!]
  not: RequestStatusTypeNullableFilter
}

input RequestOrderByInput {
  id: OrderDirection
  status: OrderDirection
  rejectReason: OrderDirection
}

input RequestUpdateInput {
  data: BasketRelateToOneForUpdateInput
  status: RequestStatusType
  rejectReason: String
}

input BasketRelateToOneForUpdateInput {
  create: BasketCreateInput
  connect: BasketWhereUniqueInput
  disconnect: Boolean
}

input RequestUpdateArgs {
  where: RequestWhereUniqueInput!
  data: RequestUpdateInput!
}

input RequestCreateInput {
  data: BasketRelateToOneForCreateInput
  status: RequestStatusType
  rejectReason: String
}

input BasketRelateToOneForCreateInput {
  create: BasketCreateInput
  connect: BasketWhereUniqueInput
}

type Image {
  id: ID!
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: ImageFieldInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createGood(data: GoodCreateInput!): Good
  createGoods(data: [GoodCreateInput!]!): [Good]
  updateGood(where: GoodWhereUniqueInput!, data: GoodUpdateInput!): Good
  updateGoods(data: [GoodUpdateArgs!]!): [Good]
  deleteGood(where: GoodWhereUniqueInput!): Good
  deleteGoods(where: [GoodWhereUniqueInput!]!): [Good]
  createBasket(data: BasketCreateInput!): Basket
  createBaskets(data: [BasketCreateInput!]!): [Basket]
  updateBasket(where: BasketWhereUniqueInput!, data: BasketUpdateInput!): Basket
  updateBaskets(data: [BasketUpdateArgs!]!): [Basket]
  deleteBasket(where: BasketWhereUniqueInput!): Basket
  deleteBaskets(where: [BasketWhereUniqueInput!]!): [Basket]
  createBrand(data: BrandCreateInput!): Brand
  createBrands(data: [BrandCreateInput!]!): [Brand]
  updateBrand(where: BrandWhereUniqueInput!, data: BrandUpdateInput!): Brand
  updateBrands(data: [BrandUpdateArgs!]!): [Brand]
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteBrands(where: [BrandWhereUniqueInput!]!): [Brand]
  createRequest(data: RequestCreateInput!): Request
  createRequests(data: [RequestCreateInput!]!): [Request]
  updateRequest(where: RequestWhereUniqueInput!, data: RequestUpdateInput!): Request
  updateRequests(data: [RequestUpdateArgs!]!): [Request]
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteRequests(where: [RequestWhereUniqueInput!]!): [Request]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  goods(where: GoodWhereInput! = {}, orderBy: [GoodOrderByInput!]! = [], take: Int, skip: Int! = 0): [Good!]
  good(where: GoodWhereUniqueInput!): Good
  goodsCount(where: GoodWhereInput! = {}): Int
  baskets(where: BasketWhereInput! = {}, orderBy: [BasketOrderByInput!]! = [], take: Int, skip: Int! = 0): [Basket!]
  basket(where: BasketWhereUniqueInput!): Basket
  basketsCount(where: BasketWhereInput! = {}): Int
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0): [Brand!]
  brand(where: BrandWhereUniqueInput!): Brand
  brandsCount(where: BrandWhereInput! = {}): Int
  requests(where: RequestWhereInput! = {}, orderBy: [RequestOrderByInput!]! = [], take: Int, skip: Int! = 0): [Request!]
  request(where: RequestWhereUniqueInput!): Request
  requestsCount(where: RequestWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
